from bot import dp
from aiogram.dispatcher.filters import Text
from func import *
from aiogram.dispatcher.filters.state import State, StatesGroup


####


class ForPDAStates(StatesGroup):
    """
    –°–æ–∑–¥–∞—é—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
    """
    default = State()
    subscribe = State()
    unsubscribe = State()


# –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
handler_dict = create_handler_dict()
# —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
kbrd_default = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è',
                                                                                '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏')


def setup_keyboard(data: dict, subscribe=True):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param data: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param subscribe: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫, –ø—Ä–∏ subscribe=False, –¥–ª—è –æ—Ç–ø–∏—Å–æ–∫
    :return: types.InlineKeyboardMarkup, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    kbrd = types.InlineKeyboardMarkup()
    if subscribe:
        btns = (handler_dict[i]['btn'] for i in data if not data[i])
    else:
        btns = (handler_dict[i]['btn'] for i in data if data[i])
    for btn in btns:
        kbrd.add(btn)
    return kbrd


@dp.message_handler(commands='start', state='*')
async def start(msg: types.Message):
    """
    –í—ã–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏ –¥–æ–±–∞–≤–ª–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    """
    user_id = msg.from_user.id
    if check_user(user_id):
        await msg.answer(f'–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å {msg.from_user.full_name}!', reply_markup=kbrd_default)
    else:
        await msg.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∞–π—Ç 4PDA! –í–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏, –Ω–∞–∂–∏–º–∞–π, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—èüòÅ',
            reply_markup=kbrd_default)


@dp.message_handler(Text(equals='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'), state='*')
async def subscribe(msg: types.Message):
    """
    –†–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "Subscribe", —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    check_user(msg.from_user.id)
    await ForPDAStates.subscribe.set()
    data = get_subscribe_status(msg.from_user.id)
    kbrd = setup_keyboard(data)
    if all(map(lambda x: data[x], data)):
        await msg.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å—ë —á—Ç–æ –º–æ–∂–Ω–æ', reply_markup=kbrd.add(
            types.InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe')))
    else:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)


@dp.callback_query_handler(state=ForPDAStates.subscribe)
async def subscribe_call(call: types.CallbackQuery):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É. –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    data = get_subscribe_status(call.from_user.id)
    url = handler_dict[call.data]['url']
    item = get_item(url)
    DataBase().update(call.data, item, call.from_user.id)
    data = get_subscribe_status(call.from_user.id)
    kbrd = setup_keyboard(data)
    if all(map(lambda x: data[x], data)):
        await ForPDAStates.default.set()
        await call.message.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å—ë —á—Ç–æ –º–æ–∂–Ω–æ', reply_markup=kbrd_default)
    else:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)
    await call.answer()


@dp.message_handler(Text(equals='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'), state='*')
async def unsubscribe(msg: types.Message):
    """
    –†–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "Unsubscribe", —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    check_user(msg.from_user.id)
    await ForPDAStates.unsubscribe.set()
    data = get_subscribe_status(msg.from_user.id)
    kbrd = setup_keyboard(data, False)
    if all(map(lambda x: not data[x], data)):
        await ForPDAStates.default.set()
        await msg.answer('–¢—ã –Ω–µ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.', reply_markup=kbrd_default)
    else:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)


@dp.callback_query_handler(state=ForPDAStates.unsubscribe)
async def unsubscribe_call(call: types.CallbackQuery):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É. –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    data = get_subscribe_status(call.from_user.id)
    DataBase().update(call.data, '', call.from_user.id)
    data = get_subscribe_status(call.from_user.id)
    kbrd = setup_keyboard(data, False)
    if all(map(lambda x: not data[x], data)):
        await ForPDAStates.default.set()
        await call.message.answer('–¢—ã –Ω–µ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.', reply_markup=kbrd_default)
    else:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)
    await call.answer()


@dp.message_handler(Text(equals='–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏'), state='*')
async def status(msg: types.Message):
    """
    –ë–µ—Ä–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω
    """
    data = get_subscribe_status(msg.from_user.id)
    if all(map(lambda x: not data[x], data)):
        await msg.answer('–¢—ã –Ω–µ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω', reply_markup=kbrd_default)
    else:
        subscribes = (handler_dict[i]['name'] for i in data if data[i])
        await msg.answer('–°–µ–π—á–∞—Å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n')
        await msg.answer(",\n".join(subscribes))


@dp.message_handler(state='*')
async def all_text(msg: types.Message):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏ –º–µ–Ω—è–µ—Ç
    —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "Default"
    """
    check_user(msg.from_user.id)
    await ForPDAStates.default.set()
    await msg.answer(f'–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å {msg.from_user.full_name}!', reply_markup=kbrd_default)

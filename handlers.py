from bot import dp
from aiogram.dispatcher.filters import Text
from func import *
from aiogram.dispatcher.filters.state import State, StatesGroup


class ForPDAStates(StatesGroup):
    default = State()
    subscribe = State()
    unsubscribe = State()


handler_dict = create_data_dict()
kbrd_default = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è',
                                                                                '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏')


def setup_data(msg):
    subscribe_status = DataBase().read_one(msg.from_user.id)[1:]
    now_subscribes = {CATEGORIES[i]: subscribe_status[i] for i in range(len(handler_dict))}
    data = {'now_subscribes': now_subscribes}
    return data


def setup_keyboard(data, subscribe=True):
    kbrd = types.InlineKeyboardMarkup()
    if subscribe:
        btns = (handler_dict[i]['btn'] for i in data['now_subscribes'] if not data['now_subscribes'][i])
    else:
        btns = (handler_dict[i]['btn'] for i in data['now_subscribes'] if data['now_subscribes'][i])
    for btn in btns:
        kbrd.add(btn)
    return kbrd


@dp.message_handler(commands='start', state='*')
async def start(msg: types.Message):
    user_id = msg.from_user.id
    if check_user(user_id):
        await msg.answer(f'–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å {msg.from_user.full_name}!', reply_markup=kbrd_default)
    else:
        await msg.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∞–π—Ç 4PDA! –í–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏, –Ω–∞–∂–∏–º–∞–π, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—èüòÅ',
            reply_markup=kbrd_default)


@dp.message_handler(Text(equals='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'), state='*')
async def subscribe(msg: types.Message):
    check_user(msg.from_user.id)
    await ForPDAStates.subscribe.set()
    data = setup_data(msg)
    kbrd = setup_keyboard(data)
    if all(map(lambda x: data['now_subscribes'][x], data['now_subscribes'])):
        await msg.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å—ë —á—Ç–æ –º–æ–∂–Ω–æ', reply_markup=kbrd.add(
            types.InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe')))
    else:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)


@dp.callback_query_handler(state=ForPDAStates.subscribe)
async def subscribe_call(call: types.CallbackQuery):
    data = setup_data(call)
    url = handler_dict[call.data]['url']
    item = get_item(url)
    DataBase().update(call.data, item, call.from_user.id)
    data = setup_data(call)
    kbrd = setup_keyboard(data)
    if all(map(lambda x: data['now_subscribes'][x], data['now_subscribes'])):
        await ForPDAStates.default.set()
        await call.message.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å—ë —á—Ç–æ –º–æ–∂–Ω–æ', reply_markup=kbrd_default)
    else:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)
    await call.answer()


@dp.message_handler(Text(equals='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'), state='*')
async def unsubscribe(msg: types.Message):
    check_user(msg.from_user.id)
    await ForPDAStates.unsubscribe.set()
    data = setup_data(msg)
    kbrd = setup_keyboard(data, False)
    if all(map(lambda x: not data['now_subscribes'][x], data['now_subscribes'])):
        await ForPDAStates.default.set()
        await msg.answer('–¢—ã –Ω–µ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.', reply_markup=kbrd_default)
    else:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)


@dp.callback_query_handler(state=ForPDAStates.unsubscribe)
async def unsubscribe_call(call: types.CallbackQuery):
    data = setup_data(call)
    DataBase().update(call.data, '', call.from_user.id)
    data = setup_data(call)
    kbrd = setup_keyboard(data, False)
    if all(map(lambda x: not data['now_subscribes'][x], data['now_subscribes'])):
        await ForPDAStates.default.set()
        await call.message.answer('–¢—ã –Ω–µ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.', reply_markup=kbrd_default)
    else:
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kbrd)
    await call.answer()

@dp.message_handler(Text(equals='–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏'), state='*')
async def status(msg: types.Message):
    data = setup_data(msg)
    if all(map(lambda x: not data['now_subscribes'][x], data['now_subscribes'])):
        await msg.answer('–¢—ã –Ω–µ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω', reply_markup=kbrd_default)
    else:
        subscribes = (handler_dict[i]['name'] for i in data['now_subscribes'] if data['now_subscribes'][i])
        await msg.answer('–°–µ–π—á–∞—Å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n')
        await msg.answer(",\n".join(subscribes))